{"name":"PRFLR","tagline":"Service that shows how fast you application is!","body":"> Несмотря на внешнюю простоту проекта, в нем сконцентрированы годы работы над крупными сервисами, бессонные ночи в поиске проблемных мест, падающие сервера, \"висящие\" процессы, таинственные проблемы в коде и множество шишек набитых в попытках их найти. И нам верится, что этот опыт будет полезен другим в виде готового продукта.\r\n\r\n> PRFLR Team: Алексей Спиридонов, Андрей Евсюков\r\n\r\nPRFLR\r\n=====\r\n\r\nPRFLR - это сервис помогающий анализировать быстродействие ваших приложений написанных на Java, PHP, GO, Perl, Python, Ruby или C++  realtime и прямо в production режиме. \r\n\r\nДля этого вы регистрируетесь в сервисе, интегрируете в свое приложение наше SDK и тут же получаете доступ к данным по производительности вашего приложения. \r\n\r\nВ первую очередь PRFLR ориентирован на высоконагруженные серверные приложения работающие на больших кластерах, однако применим для небольших проектов, десктоп и мобильных приложений. Конечно если вас действительно волнует вопрос их быстродействия.\r\n\r\nPRFLR - это сервис аналитики, направленный на скорейшее обнаружения проблемных по производительности мест в работе приложений.  Realtime и непосредственно на production серверах. Предназначена для использования в связке с системой мониторинга. \r\n\r\nPRFLR - не мониторит железо, не строит графики, не собирает логи.  Он делает одну простую вещь, помогает найти \"бутылочные горлышки\" в коде прямо в production. И ориентирован на большие распределенные кластеры серверов.\r\n\r\nPRFLR включает в себя:\r\n*  SDK под множество языков;\r\n*  няшный web-based UI для анализа данных;\r\n  \r\nСкоро появится:\r\n*  плагин для трансляции данных в системы мониторинга серверов типа Zabbix, Munin и Nagios.\r\n*  графики распределения времени таймера, для более точного анализа\r\n*  снапшоты состояния системы для сравнительного анализа по времени\r\n\r\nPRFLR предназначен для использования на production  серверах,  отправка данных идет по UDP протоколу и не сказывается на быстродействии  приложений.  В зависимости от языка приложения, 1000 таймеров отправляются примерно за 35ms,  что позволяет досконально покрыть код таймерами даже в очень крупной HiLoad системе.    \r\n\r\n \r\nВсе вышеперечисленное доступно прям сейчас и бесплатно. Для коммерческого использования планируется специальный план включающий:\r\n* График распределения времени выполнения таймера по частотности\r\n* Трансляция агрегированных данных в Zabbix для комплексного мониторинга приложений\r\n* Увеличенный объем хранимых данных\r\n* Кнопка \"Вот щас кайфово!\"  - по настоящему крутой функционал не имеющий аналогов. Обучая систему ситуациям,  когда что то идет не так и ситуациям когда все хорошо,  вы будете получать уведомления при отклонении общего состояния системы от допустимого.\r\n\r\n\r\n\r\nSupported languages\r\n=====\r\n\r\nDone\r\n* PHP Native\r\n* PHP Yii Framework Extension\r\n* Java\r\n* GOLang\r\n* Python 2/3\r\n* Node.js\r\n* Perl\r\n\r\nInProgress\r\n* Ruby\r\n* С++\r\n* C#\r\n\r\nTODO\r\n* .NET\r\n* ObjectC\r\n* Erlang\r\n* 1С\r\n\r\nКак написать SDK для своего языка: https://github.com/PRFLR/SDK/wiki/How-to-make-SDK-for-you-favorite-language\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}